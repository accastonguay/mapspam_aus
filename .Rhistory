filter(SPREAD %in% c('Winter legumes', 'Winter Cereals', 'Summer legumes', 'Summer cereals'))
lut_fao$Item
lut_fao_cer_pul <- lut_fao %>%
filter(SPREAD %in% c('Winter legumes', 'Winter Cereals', 'Summer legumes', 'Summer cereals'))
lut_fao_cer_pul
aus_fao %>%
filter(Item %in% lut_fao_cer_pul$Item)
lut_fao_cer_pul$Item
aus_fao %>%
filter(str_remove_all(Item, ',') %in% lut_fao_cer_pul$Item)
t <- readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx")
t
t <- readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6)
head( t )
t <- readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia')
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect('Vegetables', `Commodity description`))
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect('vegetables', `Commodity description`))
?str_detect
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'))
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables|Production'))
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables&Production'))
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables+Production'))
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables[A-Za-z]+Production'))
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production'))
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production')) %>%
select(Commodity = `Commodity description`, Estimate)
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production')) %>%
select(Commodity = `Commodity description`, Estimate) %>% print(n = 50)
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production'),
str_detect(`Commodity description`, 'Outdoor|Undercover'), negate = TRUE) %>%
select(Commodity = `Commodity description`, Estimate) %>% print(n = 50)
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production'),
str_detect(`Commodity description`, 'Outdoor|Undercover'), negate = FALSE) %>%
select(Commodity = `Commodity description`, Estimate) %>% print(n = 50)
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production'),
!str_detect(`Commodity description`, 'Outdoor|Undercover')) %>%
select(Commodity = `Commodity description`, Estimate) %>% print(n = 50)
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production'),
!str_detect(`Commodity description`, 'Outdoor|Undercover')) %>%
select(Commodity = `Commodity description`, Estimate) %>% print(n = 50) %>%
mutate(coefficient = ifelse(
str_detect(`Commodity description`, '(kg)'),
1000,
1),
production = Estimate * coefficient)
readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production'),
!str_detect(`Commodity description`, 'Outdoor|Undercover')) %>%
select(Commodity = `Commodity description`, Estimate) %>%
# print(n = 50) %>%
mutate(coefficient = ifelse(
str_detect(Commodity, '(kg)'),
1000,
1),
production = Estimate * coefficient)
t <- readxl::read_xlsx("C:/Users/CHA780/Downloads/AGCDCASGS202021.xlsx", sheet = 'Table 1', skip =6) %>%
filter(`Region label` == 'Australia',
str_detect(`Commodity description`, 'Vegetables'),
str_detect(`Commodity description`, 'Production'),
!str_detect(`Commodity description`, 'Outdoor|Undercover')) %>%
select(Commodity = `Commodity description`, Estimate) %>%
# print(n = 50) %>%
mutate(production = ifelse(
str_detect(Commodity, '(kg)'),
Estimate * 1e-3,
Estimate))
t
t$production %>% sum()
t$production %>% sum() * 1e-3
aus_fao
aus_fao %>%
filter(Item == 'Vegetables Primary'
)
source(here::here("C:/Temp/mapspamc_aus","01_model_setup/01_model_setup.r"))
# PREPARE PHYSICAL AREA ------------------------------------------------------------------
prepare_physical_area(param)
# PREPARE CROPLAND -----------------------------------------------------------------------
prepare_cropland(param)
# PREPARE IRRIGATED AREA -----------------------------------------------------------------
prepare_irrigated_area(param)
# HARMONIZE INPUT DATA -------------------------------------------------------------------
harmonize_inputs(param)
harmonize_inputs
split_harmonized_inputs
??split_harmonized_inputs
create_model_folder <- function(param) {
model_folder <- glue::glue("{param$model}_{param$resolution}_adm_level_{param$adm_level}_solve_level_{param$solve_level}")
return(model_folder)
}
model_folder <- create_model_folder(param)
log_file <- file(file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{ac}/log_{param$res}_{param$year}_{ac}_{param$iso3c}.log")
))
capture.output(file = log_file, append = FALSE, split = T, {
cat("\n\n--------------------------------------------------------------------------------------------------------------")
cat("\n", ac)
cat("\n--------------------------------------------------------------------------------------------------------------")
load_intermediate_data(c("cl"), ac, param, local = T, mess = F)
cat("\n--------------------------------------------------------------------------------------------------------------")
)
capture.output(file = log_file, append = FALSE, split = T, {
cat("\n\n--------------------------------------------------------------------------------------------------------------")
cat("\n", ac)
cat("\n--------------------------------------------------------------------------------------------------------------")
}
}
load_intermediate_data(c("cl"), ac, param, local = T, mess = F)
############### STEP 1: LOAD DATA ###############
# Load data
mapspamc::load_intermediate_data(c("cl"), ac, param, local = T, mess = F)
mapspamc::load_intermediate_data(c("cl"), ac, param, local = T, mess = F)
load_intermediate_data <- function(fl, adm_code, param, local = TRUE, mess = TRUE) {
fl <- match.arg(fl, c(
"cl", "ia", "ir", "pa", "pa_ps",
"cl_harm", "ia_harm", "bs", "py",
"rps", "priors", "scores"
),
several.ok = TRUE
)
load_list <- list()
model_folder <- create_model_folder(param)
if ("cl" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/cl_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["cl"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("ia" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/ia_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["ia"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("pa" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/pa_{param$year}_{adm_code}_{param$iso3c}.csv")
)
if (file.exists(file)) {
load_list[["pa"]] <- suppressMessages(readr::read_csv(file))
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("pa_ps" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/pa_ps_{param$year}_{adm_code}_{param$iso3c}.csv")
)
if (file.exists(file)) {
load_list[["pa_ps"]] <- suppressMessages(readr::read_csv(file))
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("bs" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/bs_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["bs"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("py" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/py_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["py"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("cl_harm" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/cl_harm_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["cl_harm"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("ia_harm" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/ia_harm_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["ia_harm"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("rps" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/rps_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["rps"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("scores" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/scores_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["scores"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if ("priors" %in% fl) {
file <- file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/priors_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
if (file.exists(file)) {
load_list[["priors"]] <- readRDS(file)
} else {
stop(paste(basename(file), "does not exist"),
call. = FALSE
)
}
}
if (mess) {
cat("\n", fPaste(fl), "loaded")
}
if (local) {
invisible(list2env(load_list, envir = parent.frame()))
} else {
invisible(list2env(load_list, envir = .GlobalEnv))
}
}
mapspamc::load_intermediate_data(c("cl"), ac, param, local = T, mess = F)
############### STEP 1: LOAD DATA ###############
# Load data
load_intermediate_data(c("cl"), ac, param, local = T, mess = F)
cl_df <- cl %>%
dplyr::mutate(cl = cl_mean)
cl_df <- cl_df %>%
dplyr::filter(!is.na(cl_rank))
cl_df <- harmonize_cl(df = cl_df, ac, param)
harmonize_cl <- function(df, ac, param) {
if (param$solve_level == 0) {
for (i in param$adm_level:0) {
problem_adm <- check_cl(df = df, adm_lvl =  i, ac, param)
df <- update_cl(df, problem_adm = problem_adm, adm_lvl = i)
}
}
if (param$solve_level == 1) {
for (i in param$adm_level:1) {
problem_adm <- check_cl(df = df, adm_lvl =  i, ac, param)
df <- update_cl(df, problem_adm = problem_adm, adm_lvl = i)
}
}
return(df)
}
cl_df <- harmonize_cl(df = cl_df, ac, param)
check_cl <- function(df, adm_lvl, adm_code, param){
cat("\nadm level: ", adm_lvl)
pa_adm_tot <- purrr::map_df(0:param$adm_level, calculate_pa_tot, adm_code, param)
rn <- paste0("adm", adm_lvl, "_code")
cl_check <- df %>%
dplyr::rename(adm_code = {{rn}}) %>%
dplyr::group_by(adm_code) %>%
dplyr::summarize(cl_tot = sum(cl, na.rm = T),
cl_tot_max = sum(cl_max, na.rm = T),
grid_tot = sum(grid_size, na.rm = T)) %>%
dplyr::left_join(pa_adm_tot %>%
dplyr::filter(adm_level == adm_lvl), by = "adm_code") %>%
dplyr::mutate(short = cl_tot-pa,
short_max = cl_tot_max-pa,
short_gs = grid_tot-pa) %>%
dplyr::select(adm_code, adm_name, adm_level, cl_tot, cl_tot_max, grid_tot, pa, short, short_max,
short_gs) %>%
dplyr::arrange(adm_code, adm_name) %>%
dplyr::ungroup()
problem_adm <- dplyr::filter(cl_check, short < 0)
if(NROW(problem_adm) == 0) {
cat("\nNo adjustments needed for cropland")
} else {
cl_max_rp <- problem_adm$adm_code[problem_adm$short_max > 0 & problem_adm$short_gs > 0]
cl_not_rp1 <- problem_adm$adm_code[problem_adm$short_max < 0 & problem_adm$short_gs > 0]
cl_not_rp2 <- problem_adm$adm_code[problem_adm$short_max < 0 & problem_adm$short_gs < 0]
if(length(cl_max_rp) > 0) {
cat("\nFor the following ADMs, cl is set to cl_max to solve inconsistencies.")
print(knitr::kable(problem_adm %>%
dplyr::filter(adm_code %in% cl_max_rp),
digits = 0,
format.args = list(big.mark   = ",")))
}
if(length(cl_not_rp1) > 0) {
cat("\nFor the following ADMs, cl is larger than cl_max.",
"\nThis will result in slack if the statistics are not revised.")
print(knitr::kable(problem_adm %>%
dplyr::filter(adm_code %in% cl_not_rp1),
digits = 0,
format.args = list(big.mark   = ",")))
}
if(length(cl_not_rp2) > 0) {
cat("\nFor the following ADMs, cl is larger than cl_max and even the grid size.",
"\nThis will result in slack if the statistics are not revised.")
print(knitr::kable(problem_adm %>%
dplyr::filter(adm_code %in% cl_not_rp2),
digits = 0,
format.args = list(big.mark   = ",")))
}
}
return(problem_adm)
}
cl_df <- harmonize_cl(df = cl_df, ac, param)
harmonize_inputs(param)
harmonize_inputs
calculate_pa_tot
cl_df <- harmonize_cl(df = cl_df, ac, param)
calculate_pa_tot <- function(adm_lvl, adm_code, param) {
load_intermediate_data(c("pa"), adm_code, param, local = T, mess = F)
df <- pa %>%
tidyr::gather(crop, pa, -adm_code, -adm_name, -adm_level) %>%
dplyr::filter(adm_level == adm_lvl) %>%
dplyr::group_by(adm_code, adm_name, adm_level) %>%
dplyr::summarise(pa = sum(pa, na.rm = T)) %>%
dplyr::ungroup()
return(df)
}
cl_df <- harmonize_cl(df = cl_df, ac, param)
update_cl <- function(df, problem_adm, adm_lvl) {
rn <- paste0("adm", adm_lvl, "_code")
if (NROW(problem_adm) > 0) {
df_upd <- df %>%
dplyr::mutate(cl = ifelse(.data[[rn]] %in% problem_adm$adm_code, cl_max, cl))
return(df_upd)
} else {
return(df)
}
}
cl_df <- harmonize_cl(df = cl_df, ac, param)
cl_df <- harmonize_ia(cl_df, ac, param, ia_slackp = ia_slackp, ia_slackn = ia_slackn) %>%
dplyr::mutate(
ia = ifelse(is.na(ia), 0, ia),
ia_max = ifelse(is.na(ia_max), 0, ia_max)
)
harmonize_ia <- function(df, adm_code, param, ia_slackp, ia_slackn) {
# Rank irrigated grid cells till sum of cl under irrigation is at least equal
# to the area of irrigated crops. We add the maximum of ia_slackn * grid_sell area or
# a percentage of the total irrigated area (ia_slackp) to ensure this.
load_intermediate_data(c("pa_ps", "ia"), adm_code, param, local = T, mess = F)
pa_ps <- pa_ps %>%
tidyr::gather(crop, pa, -adm_code, -adm_name, -adm_level, -system)
pa_I_tot <- sum(pa_ps$pa[pa_ps$system == "I"], na.rm = T)
slack <- max(ia_slackn * max(df$grid_size), pa_I_tot * ia_slackp)
pa_I_tot <- pa_I_tot + slack
cl_ia <- df %>%
dplyr::select(gridID, grid_size, cl, cl_max) %>%
dplyr::left_join(ia %>%
dplyr::select(gridID, ia_max, ia_rank), by = "gridID") %>%
dplyr::filter(!is.na(ia_rank)) %>%
dplyr::arrange(ia_rank, desc(cl)) %>%
dplyr::mutate(
ir_tot = pa_I_tot,
ia1 = pmin(cl, ia_max, na.rm = T),
ia2 = pmax(cl, ia_max, na.rm = T),
ia3 = pmax(cl_max, ia_max, na.rm = T),
ia1_cum = cumsum(ia1),
ia2_cum = cumsum(ia2),
ia3_cum = cumsum(ia3)
)
if (max(cl_ia$ia1_cum) >= pa_I_tot) {
cat("\nIrrigated area is sufficient")
cl_ia <- cl_ia %>%
dplyr::filter(ia1_cum <= pa_I_tot) %>%
dplyr::mutate(ia = ia1)
} else {
if (max(cl_ia$ia2_cum) >= pa_I_tot) {
cat("\nIrrigated area is sufficient when full cl is assumed to be irrigated")
cl_ia <- cl_ia %>%
dplyr::filter(ia2_cum <= pa_I_tot) %>%
dplyr::mutate(ia = ia2)
} else {
if (max(cl_ia$ia3_cum) >= pa_I_tot) {
cat("\nIrrigated area is sufficient when full cl_max is assumed to be irrigated")
cl_ia <- cl_ia %>%
dplyr::filter(ia3_cum <= pa_I_tot) %>%
dplyr::mutate(ia = ia3)
} else {
cat(
"\nThere is not enough irrigated area, which will result in slack.",
"\nCl_max is assumed to be irrigated"
)
cl_ia <- cl_ia %>%
dplyr::filter(ia3_cum <= pa_I_tot) %>%
dplyr::mutate(ia = ia3)
}
}
}
# Update cl and rank
df <- df %>%
dplyr::left_join(cl_ia %>%
dplyr::select(gridID, ia, ia_max), by = "gridID") %>%
dplyr::mutate(
cl = ifelse(!is.na(ia), ia, cl),
cl_rank = ifelse(!is.na(ia), 0, cl_rank)
)
return(df)
}
############### STEP 4: HARMONIZE IA ###############
cl_df <- harmonize_ia(cl_df, ac, param, ia_slackp = ia_slackp, ia_slackn = ia_slackn) %>%
dplyr::mutate(
ia = ifelse(is.na(ia), 0, ia),
ia_max = ifelse(is.na(ia_max), 0, ia_max)
)
harmonize_inputs
cl_slackp = 0.05
cl_slackn = 5
ia_slackp = 0.05
ia_slackn = 5
cl_df <- harmonize_ia(cl_df, ac, param, ia_slackp = ia_slackp, ia_slackn = ia_slackn) %>%
dplyr::mutate(
ia = ifelse(is.na(ia), 0, ia),
ia_max = ifelse(is.na(ia_max), 0, ia_max)
)
cl_df
cl_df <- harmonize_cl(df = cl_df, ac, param)
cl_df
load_intermediate_data(c("cl"), ac, param, local = T, mess = F)
cl
load_intermediate_data
file.path(
param$model_path,
glue::glue("processed_data/intermediate_output/{model_folder}/{adm_code}/cl_{param$res}_{param$year}_{adm_code}_{param$iso3c}.rds")
)
load_intermediate_data(c("cl"), ac, param, local = T, mess = F)
cl
